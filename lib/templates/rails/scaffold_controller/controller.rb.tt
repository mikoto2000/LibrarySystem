<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  include Pagy::Backend
  before_action :set_<%= singular_table_name %>, only: %i[show edit update destroy]

  # GET <%= route_url %>
  def index
    @<%= plural_table_name %> = <%= plural_table_name.classify %>
<%- ref_count = 0 -%>
<%- attributes.reject(&:password_digest?).each do |attribute| -%>
  <%- if attribute.reference? -%>
    <%- ref_count += 1 -%>
      .eager_load(:<%= attribute.name %>)
  <%- end -%>
<%- end -%>
<%- if ref_count == 0 -%>
      .all
<%- end -%>
    @q = @<%= plural_table_name %>.ransack(params[:q])
    @q.sorts = "id asc" if @q.sorts.empty?
    @pagy, @<%= plural_table_name %> = pagy(@q.result, page: params[:page], items: params[:items])
  end

  # GET <%= route_url %>/1
  def show
  end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  def edit
  end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    if @<%= orm_instance.save %>
      redirect_to <%= redirect_resource_name %>, notice: t("controller.create.success", model: <%= class_name %>.model_name.human)
    else
      render :new, status: :unprocessable_entity
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= redirect_resource_name %>, notice: t("controller.edit.success", model: <%= class_name %>.model_name.human)
    else
      render :edit, status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= orm_instance.destroy %>
    redirect_to <%= index_helper %>_url, notice: t("controller.destroy.success", model: <%= class_name %>.model_name.human)
  end

  private

    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= plural_table_name.classify %>
<% attributes.reject(&:password_digest?).each do |attribute| -%>
  <%- if attribute.reference? -%>
        .eager_load(:<%= attribute.name %>)
  <%- end -%>
<% end -%>
        .find(params[:id])
    end

    # Only allow a list of trusted parameters through.
    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
      params.fetch(:<%= singular_table_name %>, {})
      <%- else -%>
      params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
      <%- end -%>
    end
end
<% end -%>
